1.  Introduccion a PHP y Testing
1.1.  Dependencias en PHP con Composer
composer init 

- composer.json
{
    "name": "djmiguelarango/phplaravel",
    "description": "Project PHP POO",
    "type": "project",
    "license": "MIT",
    "authors": [
        {
            "name": "Miguel Mamani",
            "email": "djmiguelarango@gmail.com"
        }
    ],
    "require": {},
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    }
}

composer install

1.2.  Objetos en PHP
- Un objeto es una maquina de software que contiene datos y expone operaciones.
- Las clases se usan para definir un objeto

- src/User.php
namespace App;

class User
{
    protected $email;
    protected $password;
    protected $firstName;
    protected $lastName;

    public function __construct($email, $password)
    {
        $this->email    = $email;
        $this->password = password_hash($password, PASSWORD_DEFAULT);
    }

    public function setName($firstName, $lastName)
    {
        $this->firstName = $firstName;
        $this->lastName  = $lastName;
    }

    public function getFirstName()
    {
        return $this->firstName;
    }
}

- src/Author.php
namespace App;

class Author extends User
{
    public function getLastName()
    {
        return $this->lastName;
    }
}

- prueba.php
require_once 'vendor/autoload.php';

$user = new \App\Author('djmiguelarango@gmail.com', '12345');
$user->setName('Miguel', 'Mamani');
echo $user->getLastName();
echo PHP_EOL;
var_dump($user);


1.3.  Testing en PHP
- Define la funcionalidad
- Garantiza que la implementacion es correcta
- Evita futuros problemas

- Preparar(Arrange): Construir el contexto de la prueba
- Actuar(Act): Ejecutar la accion que queremos probar
- Verificar(Assert): Evaluar que los resultados sean los esperados

composer require --dev phpunit/phpunit

- tests/UserTest.php
class UserTest extends PHPUnit_Framework_TestCase
{
    public function testCreateUser()
    {
        // $user = null;
        $user = new \App\User('djmiguelarango@gmail.com', '12345');
        $this->assertInstanceOf(\App\User::class, $user);
    }

    public function haveFirstName()
    {
        $user = new \App\User('djmiguelarango@gmail.com', '12345');
        $user->setName('Miguel', 'MGM');
        $first_name = $user->getFirstName();
        $this->assertEquals('Miguel', $first_name);
    }
}

./vendor/bin/phpunit --colors=auto tests/UserTest

- src/Author.php
class Author extends User
{
    public function __construct($email, $password, $key)
    {
        parent::__construct($email, $password);
        if ($key != 'AUTHOR') {
            throw new \InvalidArgumentException("Invalid argument key.");
        }
    }
}

- tests/AuthorTest.php
class AuthorTest extends PHPUnit_Framework_TestCase
{
    public function testCreateAuthor()
    {
        $author = new \App\Author('djmiguelarango@gmail.com', '12345', 'AUTHOR');
        $this->assertInstanceOf(\App\Author::class, $author);
    }

    public function testCreateAuthorKey()
    {
        $this->setExpectedException(InvalidArgumentException::class);
        $author = new \App\Author('djmiguelarango@gmail.com', '12345', 'MIGUEL');
    }
}

/vendor/bin/phpunit --colors=auto tests


1.4.  Entidades con PHP
- Objeto con identidad unica a traves del tiempo
- Parte del modelo del problema (Modelo de Dominio)
- Mejor candidato a enriquecer

- src/Post.php
class Post
{
    private $author;
    private $title;
    private $body;
    
    public function __construct(Author $author, $title, $body)
    {
        $this->author = $author;
        $this->title  = $title;
        $this->body   = $body;
    }

    public function getBody()
    {
        return $this->body;
    }

    public function getAuthor()
    {
        return $this->author->getFirstName();
    }
}

- tests/PostTest.php
class PostTest extends PHPUnit_Framework_TestCase
{
    public function testNameAuthor()
    {
        $author = new \App\Author('djmiguelarango@gmail.com', '12345', 'AUTHOR');
        $author->setName('Miguel', 'MGM');
        $post = new \App\Post($author, 'An title', 'An post body');
        $this->assertEquals('Miguel', $post->getAuthor());
    }
}


1.5.  Objetos de valor con PHP
- Su identidad esta basada en el valor de sus atributos
- Tienen comportamientos importante para el dominio
- Quizas antes eran un tipo basico
- Suelen ser inmutables (que no se pueden modificar)

- src/Email.php
class Email
{
    private $address;

    public function __construct($address)
    {
        if (! filter_var($address, FILTER_VALIDATE_EMAIL)) {
            throw new \InvalidArgumentException('Email invalid ' . $address);
        }
        $this->address = $address;
    }

    public function getAddress()
    {
        return $this->address;
    }
}

- tests/EmailTest.php
class EmailTest extends PHPUnit_Framework_TestCase
{
    public function testEmailIsValid()
    {
        $email = new Email('djmiguelarango@gmail.com');
        $this->assertInstanceOf(Email::class, $email);
    }

    public function testEmailIsInvalid()
    {
        $this->setExpectedException(\InvalidArgumentException::class);
        $email = new Email('djmiguelarango@gmail');
    }
}

./vendor/bin/phpunit --color=auto tests/EmailTest


2.  PHP para web, Modelos Vistas Controladores y Colecciones
2.1.  Iniciando en PHP para web
- Que es la WEB?
  - Protocolo HTTP (Verbos HTTP [GET - POST - PUT - DELETE])
  - Lenguaje HTML
  - Arquitectura Cliente - Servidor
  - Antes: Pedir un archivo
  - PHP Hoy: Ruteo de URI
  - PHP + JS: JSON API + Client-side programming


2.2.  Modelo Vista Contralador en PHP
MVC (Modelo Visa Controlador)
- Separacion de responsabilidades
  - Medelo: Logica de negocio (Modelo de Dominio)
  - Vista: Presentacion visual
  - Controlador: Coordina las acciones del usuario


2.3.  Controlador
- Se asocia a uno o mas pedidos HTTP
- Traduce el pedido HTTP en un mensaje de dominio
- Arma la respuesta al pedido

composer require illuminate/http

- src/Http/Controllers/HomeController.php
class HomeController
{
    public function index(Request $request)
    {
        return 'Hello ' . $request->getRequestUri() . ' at HomeController';
    }
}

- public/index.php
require_once __DIR__ . '/../vendor/autoload.php';

$request = Request::capture();
$home = new HomeController();
echo $home->index($request);

php -S localhost:3000 public/index.php


2.4.  Vista
- Representacion grafica de la respuesta
- Separa nuestros objetos (PHP) de nuestro lenguaje de presentacion (HTML)
- Poca o ninguna necesidad de logica

- src/Http/Views/View.php
class View
{
    private $template;
    private $params;

    public function __construct($template, array $params = [])
    {
        $this->template = $template;
        $this->params = $params;
    }

    public function render()
    {
        $content = $this->loadTemplate();
        $response = new Response($content);
        return $response;
    }

    private function loadTemplate()
    {
        $path = dirname(dirname(dirname(__DIR__))) . '/resources/views';
        $templatePath = "$path/{$this->template}.php";
        return $this->includeTemplateFromFile($templatePath);
    }

    private function includeTemplateFromFile($path)
    {
        if (file_exists($path)) {
            extract($this->params);
            ob_start();
            require $path;
            return ob_get_clean();
        }
    }
}

- resources/views/home.php
<h1><?= $message ;?></h1>

- src/Http/Controllers/HomeController.php
public function index(Request $request)
{
    $params = [
        'message' => 'Hello from a View!',
    ];

    $view = new View('home', $params);
    $response = $view->render();
    $response->send();
}

- public/index.php
$controller->index($request);


2.5.  Modelo
- Representa el problema y la solucion implementada
- Separa la logica de negocio de la presentacion
- Compone un Modelo de Dominio
  - Ayuda a entender un problema
  - Utiliza el idioma del dominio
  - Mejora la comunicacion devs - cliente
  - Crece junto con el negocio

- src/Http/Controllers/HomeController.php
public function index(Request $request)
{
    $author = new Author('djmiguelarango@gmail.com', 'secret', 'AUTHOR');
    $author->setName('Miguel', 'MGM');

    $posts = [
        new Post($author, 'Post #1', 'This is first post'),
        new Post($author, 'Post #2', 'This is second post'),
        new Post($author, 'Post #3', 'This is third post'),
        new Post($author, 'Post #4', 'This is fourth post'),
    ];

    $params = [
        'message' => 'Hello from a View!',
        'posts'   => $posts,
    ];

    $view = new View('home', $params);
    $response = $view->render();
    $response->send();
}

- resources/views/home.php
<ul>
    <?php /** @type App\Post $post */
    foreach($posts as $post): ?>
        <li>
            <h2><?= $post->getTitle() ;?> by <small><?= $post->getAuthor() ;?></small></h2>
            <p>
                <?= $post->getBody() ;?>
            </p>
        </li>
    <?php endforeach ?>
</ul>

2.6.  Colecciones
- Objetos que representan una coleccion de otros
- Buscar entre la coleccion
- Agregar y quitar de la coleccion
- Filtrar la coleccion

composer require illuminate/view
composer require illuminate/routing

- src/FakeDatabase.php
class FakeDatabase
{
    public function posts()
    {
        $author = new Author('djmiguelarango@gmail.com', 'secret', 'AUTHOR');
        $author->setName('Miguel', 'MGM');

        return new Collection([
            1 => new Post($author, 'Post #1', 'This is first post'),
            2 => new Post($author, 'Post #2', 'This is second post'),
            3 => new Post($author, 'Post #3', 'This is third post'),
            4 => new Post($author, 'Post #4', 'This is fourth post'),
        ]);
    }
}

- src/Http/Controllers/HomeController.php
class HomeController
{
    private $db;

    public function __construct(FakeDatabase $database)
    {
        $this->db = $database;
    }

    public function index(Request $request)
    {
        $posts = $this->db->posts();
        $first = $posts->first();

        $params = [
            'message' => 'Hello from a View!',
            'posts'   => $posts,
            'first'   => $first,
        ];

        $view = new View('home', $params);
        return $view->render();
    }

    public function show($id)
    {
        $posts = $this->db->posts();

        $view = new View('post', [
            'post' => $posts->get($id)
        ]);

        return $view->render();
    }
}

- resources/views/post.php
<h1>
    <?php /** @var \App\Post $post */ ?>
    <?= $post->getTitle() ;?>
    <small><?= $post->getAuthor() ;?></small>
</h1>
<p><?= $post->getBody() ;?></p>

- src/Application.php
class Application
{
    private $container;

    public function __construct(Container $container)
    {
        $this->container = $container;
    }

    public function run()
    {
        $router = new Router(new Dispatcher($this->container), $this->container);
        $router->get('/', HomeController::class . '@index');
        $router->get('/post/{id}', HomeController::class . '@show');
        $response = $router->dispatch(Request::capture());
        $response->send();
    }
}

- public/index.php
$application = new \App\Application(new \Illuminate\Container\Container());
$application->run();


3.  Buenas practicas de PHP
3.1.  Arquitectura de capas
- Patrones de Arquitectura Capas (Layers)
  - Separa los roles a nivel de arquitectura
  - Define la interaccion entre cada rol
  - Ayuda a contruir software mas robusto
  - Evita el codigo spaguetti

- HTTP (Controllers - Views)
- Consola (Comands)
- API (Controllers - Transformers)
- Modelo de Dominio (Entities Services - Value Objects - Events Exceptions)
- Infraestructura - Datos (Repositories [Base de Datos] - Adapters [APIs])


3.2.  Servicios
- Coordinadores de dominio
- No tienen estados (stateless)
- Se comunica con infraestructura
- Responde pedidos de capas superiores

- src/Domain/Imprint.php
class Imprint
{
    private $db;

    public function __construct(FakeDatabase $db)
    {
        $this->db = $db;
    }

    public function listPublishedPosts()
    {
        return $this->db->posts();
    }
}

- src/Http/Controllers/HomeController.php
class HomeController
{
    private $imprint;

    public function __construct(Imprint $imprint)
    {
        $this->imprint = $imprint;
    }

    public function index(Request $request)
    {
        $posts = $this->imprint->listPublishedPosts();
        ...
    }

    public function show($id)
    {
        $posts = $this->imprint->listPublishedPosts();
        ...
    }
}


3.3.  Persistencia y Base de Datos
- Crear/Editar/Eliminar datos
- Guardar datos entre servicios
- Optimizados para busqueda
- Transaccional
- Relacionales (SQL)
  - MySQL
  - PostgreSQL
  - Oracle
  etc...
- No relacionales (NoSQL)
  - MongoDB
  - Redis
  - Cassandra
  etc...

- PDO - PHP Data Objects
  - Abstraccion de base de datos
  - Modelo de objetos
  - Estandar recomendado por la comunidad

php -m

- src/Infrastructure/Database.php
class Database
{
    public function posts()
    {
        $pdo = new \PDO('mysql:dbname=test_php;host=127.0.0.1', 'homestead', 'secret');
        
        $sql = 'SELECT * FROM posts;';

        $sth = $pdo->prepare($sql);
        $sth->execute();

        $results = $this->mapToPosts($sth->fetchAll());
        return $results;
    }

    private function mapToPosts(array $results)
    {
        $posts = new Collection();

        foreach ($results as $result) {
            $post = new Post(
                $result['author_id'],
                $result['title'],
                $result['body'],
                $result['id']
            );

            $posts->push($post);
        }

        return $posts;
    }
}

- src/Domain/Post.php
public function __construct($authorId, $title, $body, $id = null)
{
    $this->author = $authorId;
    $this->title  = $title;
    $this->body   = $body;
    $this->id     = $id;
}

public function create(Author $author, $title, $body)
{
    $post = new Post($author, $title, $body);
    return $post;
}

- tests/DatabaseTest.php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    public function testConnection()
    {
        $db = new Database();

        $results = $db->posts();

        $this->assertInstanceOf(\Illuminate\Support\Collection::class, $results);

        foreach ($results as $post) {
            $this->assertInstanceOf(\App\Domain\Post::class, $post);
        }
    }
}

./vendor/bin/phpunit tests/DatabaseTest --color=always


3.4.  Repositorios
- Encapsulan el acceso a datosç
- Se modela como una coleccion
- Separan logica de persistencia

- src/Infrastructure/PostRepository.php
class PostRepository
{
    public function getPDO()
    {
        return new \PDO('mysql:dbname=test_php;host=127.0.0.1', 'homestead', 'secret');
    }

    public function posts()
    {
        $pdo = $this->getPDO();

        $sql = 'SELECT * FROM posts;';

        $sth = $pdo->prepare($sql);
        $sth->execute();

        $results = $this->mapToPosts($sth->fetchAll());

        return $results;
    }

    public function find($id)
    {
        $pdo = $this->getPDO();

        $sql = 'SELECT * FROM posts WHERE id = :id ;';

        $sth = $pdo->prepare($sql);
        $sth->bindParam(':id', $id, \PDO::PARAM_INT);

        $sth->execute();
        
        $result = $sth->fetch();

        if ($result === false) {
            throw new \OutOfBoundsException('Post does not exist!');
        }

        return $this->mapPost($result);
    }

    public function search($text)
    {
        $pdo = $this->getPDO();

        $sql = 'SELECT * FROM posts WHERE title LIKE :text OR body LIKE :text;';

        $sth = $pdo->prepare($sql);

        $text = '%' . $text . '%';
        $sth->bindParam(':text', $text, \PDO::PARAM_STR);

        $sth->execute();

        return $this->mapToPosts($sth->fetchAll());
    }

    private function mapToPosts(array $results)
    {
        $posts = new Collection();

        foreach ($results as $result) {
            $post = $this->mapPost($result);

            $posts->push($post);
        }

        return $posts;
    }

    private function mapPost($result)
    {
        return new Post(
            $result['author_id'],
            $result['title'],
            $result['body'],
            $result['id']
        );
    }
}

- tests/PostRepositoryTest.php
class PostRepositoryTest extends PHPUnit_Framework_TestCase
{
    public function testGetAllPosts()
    {
        $db = new PostRepository();

        $results = $db->posts();

        $this->assertInstanceOf(Collection::class, $results);

        foreach ($results as $post) {
            $this->assertInstanceOf(\App\Domain\Post::class, $post);
        }
    }

    public function testFindAPost()
    {
        $db = new PostRepository();

        $post = $db->find(2);

        $this->assertInstanceOf(\App\Domain\Post::class, $post);
    }

    public function testNotFindAPost()
    {
        $db = new PostRepository();

        $this->setExpectedException(\OutOfBoundsException::class);
        $post = $db->find(2333);
    }

    public function testSearchATextInPost()
    {
        $db = new PostRepository();

        $posts = $db->search('#4');

        $this->assertInstanceOf(Collection::class, $posts);
    }
}


3.5.  Errores y Excepciones


4.
5.
6.

7. Ignite
- Evitar Data Transfer
- En definiciones (Clases - funciones - Interfaces) no cerrar PHP
- Deploy PHP (Laravel Envoyer)
- No usar echo en produccion
- Encapsulamiento (Las propiedades de un objeto solo se pueden cambiar mediante los metodos definidos para ese objeto)
- Cohecion - La cohesión tiene que ver con que cada módulo se refiera a un único proceso o entidad, cada módulo (función o procedimiento) realiza una única tarea trabajando sobre una sola estructura de datos.
- Acoplamiento - El acoplamiento mide el grado de relacionamiento de un módulo con los demás, se logra bajo acoplamiento reduciendo las interacciones entre procedimientos y funciones, reduciendo la cantidad y complejidad de los parámetros y disminuyendo al mínimo los parámetros por referencia y los efectos colaterales.