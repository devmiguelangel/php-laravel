1.  Introduccion a PHP y Testing
1.1.  Dependencias en PHP con Composer
composer init 

- composer.json
{
    "name": "djmiguelarango/phplaravel",
    "description": "Project PHP POO",
    "type": "project",
    "license": "MIT",
    "authors": [
        {
            "name": "Miguel Mamani",
            "email": "djmiguelarango@gmail.com"
        }
    ],
    "require": {},
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    }
}

composer install

1.2.  Objetos en PHP
- Un objeto es una maquina de software que contiene datos y expone operaciones.
- Las clases se usan para definir un objeto

- src/User.php
namespace App;

class User
{
    protected $email;
    protected $password;
    protected $firstName;
    protected $lastName;

    public function __construct($email, $password)
    {
        $this->email    = $email;
        $this->password = password_hash($password, PASSWORD_DEFAULT);
    }

    public function setName($firstName, $lastName)
    {
        $this->firstName = $firstName;
        $this->lastName  = $lastName;
    }

    public function getFirstName()
    {
        return $this->firstName;
    }
}

- src/Author.php
namespace App;

class Author extends User
{
    public function getLastName()
    {
        return $this->lastName;
    }
}

- prueba.php
require_once 'vendor/autoload.php';

$user = new \App\Author('djmiguelarango@gmail.com', '12345');
$user->setName('Miguel', 'Mamani');
echo $user->getLastName();
echo PHP_EOL;
var_dump($user);


1.3.  Testing en PHP
- Define la funcionalidad
- Garantiza que la implementacion es correcta
- Evita futuros problemas

- Preparar(Arrange): Construir el contexto de la prueba
- Actuar(Act): Ejecutar la accion que queremos probar
- Verificar(Assert): Evaluar que los resultados sean los esperados

composer require --dev phpunit/phpunit

- tests/UserTest.php
class UserTest extends PHPUnit_Framework_TestCase
{
    public function testCreateUser()
    {
        // $user = null;
        $user = new \App\User('djmiguelarango@gmail.com', '12345');
        $this->assertInstanceOf(\App\User::class, $user);
    }

    public function haveFirstName()
    {
        $user = new \App\User('djmiguelarango@gmail.com', '12345');
        $user->setName('Miguel', 'MGM');
        $first_name = $user->getFirstName();
        $this->assertEquals('Miguel', $first_name);
    }
}

./vendor/bin/phpunit --colors=auto tests/UserTest

- src/Author.php
class Author extends User
{
    public function __construct($email, $password, $key)
    {
        parent::__construct($email, $password);
        if ($key != 'AUTHOR') {
            throw new \InvalidArgumentException("Invalid argument key.");
        }
    }
}

- tests/AuthorTest.php
class AuthorTest extends PHPUnit_Framework_TestCase
{
    public function testCreateAuthor()
    {
        $author = new \App\Author('djmiguelarango@gmail.com', '12345', 'AUTHOR');
        $this->assertInstanceOf(\App\Author::class, $author);
    }

    public function testCreateAuthorKey()
    {
        $this->setExpectedException(InvalidArgumentException::class);
        $author = new \App\Author('djmiguelarango@gmail.com', '12345', 'MIGUEL');
    }
}

/vendor/bin/phpunit --colors=auto tests


1.4.  Patrones de Dise√±o
1.5.  Entidades con PHP
1.6.  Objetos de valor con PHP

2.
3.
4.
5.
6.
